{
  "address": "0x197d33d045700Cd84652ae1b3c80dde1C439EC6A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINUMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adressToAmountOfFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x62125a792cb82a2c2fe466d4379693636a95d57ec49b078d8a8aff1ce1c8a30a",
  "receipt": {
    "to": null,
    "from": "0x40652De29A0e273417C0BDb3a2a1B505669c44a3",
    "contractAddress": "0x197d33d045700Cd84652ae1b3c80dde1C439EC6A",
    "transactionIndex": 24,
    "gasUsed": "888588",
    "logsBloom": "0x
    "blockHash": "0xba7719162726c9008319e3a3d43972f3a81ab0a5c029fde24ca767287f5fd518",
    "transactionHash": "0x62125a792cb82a2c2fe466d4379693636a95d57ec49b078d8a8aff1ce1c8a30a",
    "logs": [],
    "blockNumber": 10823180,
    "cumulativeGasUsed": "5861314",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "f56760df4bda495e6176b143efe7453a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINUMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adressToAmountOfFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\ncontract FundMe {\\n    // we can call now priceConverter functions with uint256 values.\\n    using PriceConverter for uint256;\\n    // constant and immutable veriables are much gas efficient.\\n    uint256 public constant MINUMUM_USD = 50 * 10**18;\\n\\n    address[] public funders;\\n    mapping(address => uint256) public adressToAmountOfFunded;\\n    address public immutable i_owner;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // In order to send or withdraw money with function you need to mark the\\n    // function by payable keyword.\\n    function fund() public payable {\\n        // msg.value got used into getConversionRate as firstparameter.\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINUMUM_USD,\\n            \\\"You need to spend more ETH\\\"\\n        );\\n        funders.push(msg.sender);\\n        adressToAmountOfFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            adressToAmountOfFunded[funder] = 0;\\n        }\\n        // reset the array\\n        funders = new address[](0);\\n\\n        // 3 steps for withdrawing the funds\\n        // 1.transfering\\n        // payable(msg.sender).transfer(address(thsi).balance);\\n        // you need to cast address to payable so you could use transfer functions alike.\\n        // if transfers fails, program will throw an error and return back the money.\\n        // 2.sending\\n        // bool success = payable(msg.sender).send(address(this).balance);\\n        // require(success, \\\"Sending failed\\\");\\n        // when you use send method, method will return bool then you use it with\\n        // require function to return back the money.\\n        // 3.calling (recomended)\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"call failed\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == i_owner, \\\"Only the owner withdraws the funds.\\\");\\n        // The underscore represents here is the rest of the code.\\n        _;\\n    }\\n\\n    // sending money without fund method.\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    // receiving money with data.\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x1c3db7997431e13ef0a2c877d61970a8affa9aaef35a4ab058b1ea975a985525\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// libraries can't have state variables, functions can't send eth or withdraw it.\\r\\n// all libraries functions are internal\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmounth,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmounthInUsd = (ethPrice * ethAmounth) / 1e18;\\r\\n        return ethAmounthInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x47d0215e459b4209ea257c8d988c9c58649665595803c3d354aca96dc56ec006\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b8063116ebb2d1461008d5780632b16468b146100b85780633ccfd60b146100f557610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b6040516100af9190610765565b60405180910390f35b3480156100c457600080fd5b506100df60048036038101906100da91906107e3565b6102df565b6040516100ec9190610765565b60405180910390f35b34801561010157600080fd5b5061010a6102f7565b005b34801561011857600080fd5b50610121610540565b60405161012e919061086f565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610566565b6040516101639190610899565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108e0565b61058a565b6040516101a09190610899565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c990919063ffffffff16565b1015610229576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102209061096a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6802b5e3af16b188000081565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037c906109fc565b60405180910390fd5b60005b6000805490508110156104305760008082815481106103aa576103a9610a1c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042890610a7a565b915050610388565b50600067ffffffffffffffff81111561044c5761044b610ac3565b5b60405190808252806020026020018201604052801561047a5781602001602082028036833780820191505090505b50600090805190602001906104909291906106a5565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104b790610b23565b60006040518083038185875af1925050503d80600081146104f4576040519150601f19603f3d011682016040523d82523d6000602084013e6104f9565b606091505b505090508061053d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053490610b84565b60405180910390fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105d583610605565b90506000670de0b6b3a764000085836105ee9190610ba4565b6105f89190610c2d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064e57600080fd5b505afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106869190610ceb565b5050509150506402540be4008161069d9190610d66565b915050919050565b82805482825590600052602060002090810192821561071e579160200282015b8281111561071d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c5565b5b50905061072b919061072f565b5090565b5b80821115610748576000816000905550600101610730565b5090565b6000819050919050565b61075f8161074c565b82525050565b600060208201905061077a6000830184610756565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107b082610785565b9050919050565b6107c0816107a5565b81146107cb57600080fd5b50565b6000813590506107dd816107b7565b92915050565b6000602082840312156107f9576107f8610780565b5b6000610807848285016107ce565b91505092915050565b6000819050919050565b600061083561083061082b84610785565b610810565b610785565b9050919050565b60006108478261081a565b9050919050565b60006108598261083c565b9050919050565b6108698161084e565b82525050565b60006020820190506108846000830184610860565b92915050565b610893816107a5565b82525050565b60006020820190506108ae600083018461088a565b92915050565b6108bd8161074c565b81146108c857600080fd5b50565b6000813590506108da816108b4565b92915050565b6000602082840312156108f6576108f5610780565b5b6000610904848285016108cb565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448000000000000600082015250565b6000610954601a8361090d565b915061095f8261091e565b602082019050919050565b6000602082019050818103600083015261098381610947565b9050919050565b7f4f6e6c7920746865206f776e657220776974686472617773207468652066756e60008201527f64732e0000000000000000000000000000000000000000000000000000000000602082015250565b60006109e660238361090d565b91506109f18261098a565b604082019050919050565b60006020820190508181036000830152610a15816109d9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a858261074c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ab857610ab7610a4b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b0d600083610af2565b9150610b1882610afd565b600082019050919050565b6000610b2e82610b00565b9150819050919050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b6e600b8361090d565b9150610b7982610b38565b602082019050919050565b60006020820190508181036000830152610b9d81610b61565b9050919050565b6000610baf8261074c565b9150610bba8361074c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bf357610bf2610a4b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c388261074c565b9150610c438361074c565b925082610c5357610c52610bfe565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c7d81610c5e565b8114610c8857600080fd5b50565b600081519050610c9a81610c74565b92915050565b6000819050919050565b610cb381610ca0565b8114610cbe57600080fd5b50565b600081519050610cd081610caa565b92915050565b600081519050610ce5816108b4565b92915050565b600080600080600060a08688031215610d0757610d06610780565b5b6000610d1588828901610c8b565b9550506020610d2688828901610cc1565b9450506040610d3788828901610cd6565b9350506060610d4888828901610cd6565b9250506080610d5988828901610c8b565b9150509295509295909350565b6000610d7182610ca0565b9150610d7c83610ca0565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dbb57610dba610a4b565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610df857610df7610a4b565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e3557610e34610a4b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e7257610e71610a4b565b5b82820290509291505056fea264697066735822122028d035e5f0368c1595aa10f40f292f6e6a2f425e5ae5efaaf0d0a2cd32f163c664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "adressToAmountOfFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}